#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Feb 14 15:37:32 2023

@author: nate
"""

import pandas as pd
import numpy as np

data=pd.read_csv(r'/Users/nate/Downloads/CoincidenceSorted1.CSV', delimiter=';', header=0) #download the file and put the path here



coincidences_index=[] #stores the index of coincidences
detector_pos_0='thing 0' #position of detector 0
detector_pos_1='thing 1' #position of detector 1


for tol_factor in range(20): #helps find appropriate coincidence windows code
    tol = 10**(tol_factor/2) #logarithmic range of coincidence windows
    coincidences_index=[]
    for i in range(len(data.iloc[:,2])-1):
        if np.abs(data.iloc[i,2]-data.iloc[i+1,2]) < tol:
            coincidences_index.append(i)
    print(f'{len(coincidences_index)} coincidences for a tolerance of {tol}')

real_tol=96*10**3
print(f'experimental tolerance was {real_tol}')

coincidences_index=[] #stores the index of coincidences

tol=1*10**3 #coincidence window
for i in range(len(data.iloc[:,2])-1): #for all the data points
    if np.abs(data.iloc[i,2]-data.iloc[i+1,2]) < tol: #is the time diference between points less than the coincidence window
        coincidences_index.append(i)

'''
Assuming channel 0 is scatterer and channel 1 is absorber (although this is PET data lol)
Scatter location is scatter detector
Absorption location is absorption detector
'''

scatter_energies=[] #energies of scatters
scatter_locations=[] #locations of scatters
absorption_energies=[] #energies of absorptions
absorption_locations=[] #locations of absorptions



        
for index_index, coincidence_index in enumerate(coincidences_index):
    if data.iloc[coincidence_index,1]==0: #if the coincidence was registered in detector 0 (scatterer)
        scatter_energies.append(data.iloc[coincidence_index,3]) #add scatter energy to list
        scatter_locations.append(detector_pos_0) #add scatter location to list
        #if data.iloc[coincidence_index+1,1]==1:, repeated as many times as you have absorption detectors
        absorption_energies.append(data.iloc[coincidence_index+1,3]) #add absorption energy to list
        absorption_locations.append(detector_pos_1) #add absorption locator to list
    else: #if the coincidence was registered in detector 1 #repeat as many times as you have detectors
        scatter_energies.append(data.iloc[coincidence_index+1,3]) #scatter energy is the energy detected in detector 0 #would need editing for more detectors
        scatter_locations.append(detector_pos_0) 
        #if data.iloc[coincidences_index[i]+1,1]==0:, repeated as many times as you have absorption detectors
        absorption_energies.append(data.iloc[coincidence_index,3])
        absorption_locations.append(detector_pos_1)  
        
'''
condensation test 1: functions (incomplete)
'''
    
detector=data.iloc[0,1]
wanted_detector=0
scatter_energies=[] #energies of scatters
scatter_locations=[] #locations of scatters
absorption_energies=[] #energies of absorptions
absorption_locations=[] #locations of absorptions

def scatter_function(data, coincidence_index, wanted_detector, wanted_detector_pos, scatter_energies, scatter_locations, absorption_energies, absorption_locations):
    if data.iloc[coincidence_index,1]==wanted_detector:
        scatter_energies.append(data.iloc[coincidence_index,3]) 
        scatter_locations.append(wanted_detector_pos)
        
def absorption_function(data, coincidence_index, wanted_detector, wanted_detector_pos, scatter_energies, scatter_locations, absorption_energies, absorption_locations):
    if data.iloc[coincidence_index,1]==wanted_detector:
        absorption_energies.append(data.iloc[coincidence_index,3]) 
        absorption_locations.append(wanted_detector_pos)

'''
condensation test 2: loops
(doesn't work?)
'''

detector_number=8
detector_pos=['thing 0','thing 1','thing 2','thing 3', 'thing 4', 'thing 5', 'thing 6', 'thing 7']

for index_index, coincidence_index in enumerate(coincidences_index):
    for i in range(detector_number):
        for j in range(detector_number):
            if data.iloc[coincidence_index,1]==i: #if the coincidence was registered in detector i
                if data.iloc[coincidence_index+1,1]==j: #if the second detector involved was detector j
                    #calculate angles
                    if data.iloc[coincidence_index,1]<4: #placeholder, if i is the scatterer
                        scatter_energies.append(data.iloc[coincidence_index,3]) #add scatter energy to list
                        scatter_locations.append(detector_pos[i]) #add scatter location to list
                        absorption_energies.append(data.iloc[coincidence_index+1,3]) #add absorption energy to list
                        absorption_locations.append(detector_pos[j]) #add absorption locator to list
                    else: 
                        scatter_energies.append(data.iloc[coincidence_index+1,3]) #scatter energy is the energy detected in detector 0 #would need editing for more detectors
                        scatter_locations.append(detector_pos[i]) 
                        absorption_energies.append(data.iloc[coincidence_index,3])
                        absorption_locations.append(detector_pos[j]) 
